# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - 'VERSION'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  checktag:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.content }}
      #tagexists: ${{ steps.checkTag.outputs.exists }}
      zipname: ${{ github.event.repository.name }}.${{ github.event.repository.updated_at }}.v${{ steps.version.outputs.content }}.zip
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@master
          
      - name: Read VERSION
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: VERSION
          trim: True
          
#      - name: Echo VERSION file
#        run: echo "VERSION='${{ steps.version.outputs.content }}'"
      
#      - name: Check tag
#        uses: mukunku/tag-exists-action@v1.0.0
#        id: checkTag
#        with: 
#          tag: '${{ steps.version.outputs.content }}'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Dump GitHub context
#        env:
#          GITHUB_CONTEXT: ${{ toJSON(github) }}
#        run: echo "$GITHUB_CONTEXT"
#      - name: Dump job context
#        env:
#          JOB_CONTEXT: ${{ toJSON(job) }}
#        run: echo "$JOB_CONTEXT"
#      - name: Dump steps context
#        env:
#          STEPS_CONTEXT: ${{ toJSON(steps) }}
#        run: echo "$STEPS_CONTEXT"
#      - name: Dump runner context
#        env:
#          RUNNER_CONTEXT: ${{ toJSON(runner) }}
#        run: echo "$RUNNER_CONTEXT"
#      - name: Dump strategy context
#        env:
#          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
#        run: echo "$STRATEGY_CONTEXT"
#      - name: Dump matrix context
#        env:
#          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
#        run: echo "$MATRIX_CONTEXT"
#  createtag:
#  
#    runs-on: ubuntu-latest
#    needs: checktag        
    
#    steps:
#      - name: Display Inputs
#        run: |
#          echo "Version=${{ needs.checktag.outputs.version }}"
#          echo "Exists Already=${{ needs.checktag.outputs.tagexists }}"
#    
#      - name: Create Tag
#        #if: contains(needs.checktag.outputs.tagexists, 'false')  
#        if: '!(needs.checktag.outputs.tagexists)'
#        uses: negz/create-tag@v1
#        with:
#           version: '${{ needs.checktag.outputs.version }}'
#           token: ${{ secrets.GITHUB_TOKEN }}
#           
#      - name: Display Message
#        if: needs.checktag.outputs.tagexists
#        run: |
#          echo "Tag already exists, not attempting to recreate"
           
  createrelease:
  
    runs-on: ubuntu-latest
    needs: checktag
    if: ${{ !(needs.checktag.outputs.version == null)  }}
    #needs: [checktag,createtag]
    
    steps:

      - name: Display Inputs
        run: echo "${{ toJSON (needs.checktag.outputs) }}"
 
      - name: Pull the repo
        uses: actions/checkout@master

      - name: Zip Release
        uses: TheDoctor0/zip-release@0.4.2
        with:
                filename: ${{ needs.checktag.outputs.zipname }}
                exclusions: '*.git* ./folder*'
 
      - name: Upload Release
        uses: cb80/pubrel@latest
        with:
          ref: 'refs/tags/${{ needs.checktag.outputs.version }}'
          replace: '${{ needs.checktag.outputs.version }}'
          files: ${{ needs.checktag.outputs.zipname }}
